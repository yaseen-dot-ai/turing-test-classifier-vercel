"use client";
import React, { useState, useEffect } from "react";

// Default model names as fallback
const DEFAULT_MODEL_NAMES = [
  "gpt-4.1",
  "claude-3-7-sonnet-20250219",
  "SuperAnnotate/roberta-large-llm-content-detector"
];

const GRADIENT_BG = "bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900";
const CARD_BG = "bg-white/10 backdrop-blur-md border border-white/20";

export default function Home() {
  const [mode, setMode] = useState<"predict" | "run">("predict");
  const [modelNames, setModelNames] = useState<string[]>(DEFAULT_MODEL_NAMES);
  
  // Load model names from config
  useEffect(() => {
    const loadModelNames = async () => {
      try {
        const response = await fetch('/ft_config.json');
        if (!response.ok) throw new Error('Failed to load config');
        const config = await response.json();
        
        // Use config values if available, otherwise use defaults
        const names = [
          config.gpt || DEFAULT_MODEL_NAMES[0],
          DEFAULT_MODEL_NAMES[1], // Claude model name is not in config
          config.roberta || DEFAULT_MODEL_NAMES[2]
        ];
        setModelNames(names);
      } catch (error) {
        console.error('Error loading model names:', error);
        // Keep using default names if config loading fails
      }
    };
    
    loadModelNames();
  }, []);
  
  // Predict state
  const [predictJson, setPredictJson] = useState(`[
  "This is a human-written text.",
  "This response was generated by AI."
]`);
  const [predictLoading, setPredictLoading] = useState(false);
  const [predictResult, setPredictResult] = useState<Array<{
    text: string;
    [key: string]: string;
  }>>([]);
  const [predictError, setPredictError] = useState<string | null>(null);

  // Run state
  const [runJson, setRunJson] = useState(`{
  "samples": [
    { "text": "This is human text.", "label": "HUMAN" },
    { "text": "AI generated response.", "label": "AI" }
  ],
  "return_preds": true
}`);
  const [runLoading, setRunLoading] = useState(false);
  const [runResult, setRunResult] = useState<{
    run_id: string;
    winner: string;
    results: {
      [key: string]: {
        precision: { [key: string]: number };
        recall: { [key: string]: number };
      };
    };
    predictions?: any[];
  } | null>(null);
  const [runError, setRunError] = useState<string | null>(null);

  // Predict handler
  async function handlePredict() {
    setPredictLoading(true);
    setPredictError(null);
    setPredictResult([]);
    
    try {
      const texts = JSON.parse(predictJson);
      if (!Array.isArray(texts)) throw new Error("Must be an array of strings");
      
      const res = await fetch("/api/predict", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ texts }),
      });
      
      if (!res.ok) throw new Error("API error");
      const data = await res.json();
      setPredictResult(data.predictions || []);
    } catch (e: any) {
      setPredictError(e.message || "Error");
    } finally {
      setPredictLoading(false);
    }
  }

  // Run handler
  async function handleRun() {
    setRunLoading(true);
    setRunError(null);
    setRunResult(null);
    
    try {
      const payload = JSON.parse(runJson);
      if (!payload.samples || !Array.isArray(payload.samples)) {
        throw new Error("Must have samples array");
      }
      
      const res = await fetch("/api/run", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
      });
      
      if (!res.ok) throw new Error("API error");
      const data = await res.json();
      setRunResult(data);
    } catch (e: any) {
      setRunError(e.message || "Error");
    } finally {
      setRunLoading(false);
    }
  }

  return (
    <div className={`${GRADIENT_BG} min-h-screen py-10 px-4 text-white`}>
      <div className="max-w-4xl mx-auto">
        {/* Header */}
        <div className="text-center mb-12">
          <h1 className="text-5xl font-bold mb-4 bg-gradient-to-r from-white to-purple-300 bg-clip-text text-transparent">
            Turing Test Classifier
          </h1>
          <p className="text-xl text-white/70">
            AI vs Human text classification with explainable results
          </p>
        </div>

        {/* Mode Toggle */}
        <div className="flex justify-center mb-8">
          <div className={`${CARD_BG} rounded-full p-2 flex gap-2`}>
            <button
              className={`px-6 py-2 rounded-full font-semibold transition-all ${
                mode === "predict"
                  ? "bg-white text-purple-900 shadow-lg"
                  : "text-white/70 hover:text-white"
              }`}
              onClick={() => setMode("predict")}
            >
              Predict
            </button>
            <button
              className={`px-6 py-2 rounded-full font-semibold transition-all ${
                mode === "run"
                  ? "bg-white text-purple-900 shadow-lg"
                  : "text-white/70 hover:text-white"
              }`}
              onClick={() => setMode("run")}
            >
              Run Experiment
            </button>
          </div>
        </div>

        {/* Predict Mode */}
        {mode === "predict" && (
          <div className={`${CARD_BG} rounded-xl p-8 shadow-2xl`}>
            <h2 className="text-2xl font-bold mb-6">Predict Labels</h2>
            <div className="space-y-4">
              <label className="block text-sm font-medium text-white/80">
                Paste JSON array of texts:
              </label>
              <textarea
                className="w-full h-32 bg-black/20 border border-white/30 rounded-lg p-4 font-mono text-sm focus:outline-none focus:ring-2 focus:ring-purple-400"
                value={predictJson}
                onChange={(e) => setPredictJson(e.target.value)}
                spellCheck={false}
              />
              <button
                className="bg-gradient-to-r from-purple-600 to-pink-600 text-white px-6 py-3 rounded-lg font-semibold shadow-lg hover:from-purple-700 hover:to-pink-700 transition-all disabled:opacity-50"
                onClick={handlePredict}
                disabled={predictLoading}
              >
                {predictLoading ? "Predicting..." : "Predict"}
              </button>
              
              {predictError && (
                <div className="text-red-400 font-medium">{predictError}</div>
              )}
              
              {predictResult.length > 0 && (
                <div className="mt-6 overflow-x-auto">
                  <table className="w-full border border-white/20 rounded-lg">
                    <thead className="bg-white/10">
                      <tr>
                        <th className="border-b border-white/20 px-4 py-2 text-left">Text</th>
                        {modelNames.map((model) => (
                          <th key={model} className="border-b border-white/20 px-4 py-2 text-left text-xs">
                            {model}
                          </th>
                        ))}
                      </tr>
                    </thead>
                    <tbody>
                      {predictResult.map((row, i) => (
                        <tr key={i} className="hover:bg-white/5">
                          <td className="border-b border-white/10 px-4 py-2 max-w-xs truncate" title={row.text}>
                            {row.text}
                          </td>
                          {modelNames.map((model) => (
                            <td key={model} className="border-b border-white/10 px-4 py-2 text-sm">
                              {row[model]}
                            </td>
                          ))}
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              )}
            </div>
          </div>
        )}

        {/* Run Mode */}
        {mode === "run" && (
          <div className={`${CARD_BG} rounded-xl p-8 shadow-2xl`}>
            <h2 className="text-2xl font-bold mb-6">Run Experiment</h2>
            <div className="space-y-4">
              <label className="block text-sm font-medium text-white/80">
                Paste JSON with samples and options:
              </label>
              <textarea
                className="w-full h-32 bg-black/20 border border-white/30 rounded-lg p-4 font-mono text-sm focus:outline-none focus:ring-2 focus:ring-purple-400"
                value={runJson}
                onChange={(e) => setRunJson(e.target.value)}
                spellCheck={false}
              />
              <button
                className="bg-gradient-to-r from-purple-600 to-pink-600 text-white px-6 py-3 rounded-lg font-semibold shadow-lg hover:from-purple-700 hover:to-pink-700 transition-all disabled:opacity-50"
                onClick={handleRun}
                disabled={runLoading}
              >
                {runLoading ? "Running..." : "Run Experiment"}
              </button>
              
              {runError && (
                <div className="text-red-400 font-medium">{runError}</div>
              )}
              
              {runResult && (
                <div className="mt-6 space-y-4">
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div className={`${CARD_BG} p-4 rounded-lg`}>
                      <div className="text-sm text-white/70">Winner</div>
                      <div className="font-bold text-lg">{runResult.winner}</div>
                    </div>
                    <div className={`${CARD_BG} p-4 rounded-lg`}>
                      <div className="text-sm text-white/70">Avg Precision</div>
                      <div className="font-bold text-lg">
                        {runResult?.results ? 
                          (Object.values(runResult.results).reduce((acc: number, model) => {
                            const modelPrecision = Object.values(model.precision).reduce((a: number, b: number) => a + b, 0) / 3;
                            return acc + modelPrecision;
                          }, 0) / Object.keys(runResult.results).length * 100).toFixed(1) + '%' :
                          'N/A'}
                      </div>
                    </div>
                    <div className={`${CARD_BG} p-4 rounded-lg`}>
                      <div className="text-sm text-white/70">Avg Recall</div>
                      <div className="font-bold text-lg">
                        {runResult?.results ? 
                          (Object.values(runResult.results).reduce((acc: number, model) => {
                            const modelRecall = Object.values(model.recall).reduce((a: number, b: number) => a + b, 0) / 3;
                            return acc + modelRecall;
                          }, 0) / Object.keys(runResult.results).length * 100).toFixed(1) + '%' :
                          'N/A'}
                      </div>
                    </div>
                  </div>
                  
                  {runResult.predictions && (
                    <div className="overflow-x-auto">
                      <table className="w-full border border-white/20 rounded-lg">
                        <thead className="bg-white/10">
                          <tr>
                            <th className="border-b border-white/20 px-4 py-2 text-left">Text</th>
                            <th className="border-b border-white/20 px-4 py-2 text-left">Label</th>
                            {modelNames.map((model) => (
                              <th key={model} className="border-b border-white/20 px-4 py-2 text-left text-xs">
                                {model}
                              </th>
                            ))}
                          </tr>
                        </thead>
                        <tbody>
                          {runResult.predictions.map((row: any, i: number) => (
                            <tr key={i} className="hover:bg-white/5">
                              <td className="border-b border-white/10 px-4 py-2 max-w-xs truncate" title={row.text}>
                                {row.text}
                              </td>
                              <td className="border-b border-white/10 px-4 py-2 text-sm">
                                {row.label}
                              </td>
                              {modelNames.map((model) => (
                                <td key={model} className="border-b border-white/10 px-4 py-2 text-sm">
                                  {row[`${model}_pred`]}
                                </td>
                              ))}
                            </tr>
                          ))}
                        </tbody>
                      </table>
                    </div>
                  )}
                </div>
              )}
            </div>
          </div>
        )}
      </div>
    </div>
  );
} 